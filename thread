public class ThreadDemo {
    
    public static void main(String[] args) {
        // Creating threads using Thread class
        Thread thread1 = new MyThread("Thread 1");
        Thread thread2 = new MyThread("Thread 2");
        
        // Creating threads using Runnable interface
        Thread thread3 = new Thread(new MyRunnable(), "Thread 3");
        Thread thread4 = new Thread(new MyRunnable(), "Thread 4");
        
        // Starting threads
        thread1.start();
        thread2.start();
        thread3.start();
        thread4.start();
        
        // Sleeping main thread for 2 seconds
        try {
            System.out.println("Main thread sleeping for 2 seconds.");
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        // Interrupting threads
        thread1.interrupt();
        thread2.interrupt();
        thread3.interrupt();
        thread4.interrupt();
        
        // Waiting for threads to finish
        try {
            thread1.join();
            thread2.join();
            thread3.join();
            thread4.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("All threads have finished execution.");
    }
}

class MyThread extends Thread {
    
    public MyThread(String name) {
        super(name);
    }
    
    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName() + " is running.");
        try {
            // Performing some task
            for (int i = 0; i < 5; i++) {
                System.out.println(Thread.currentThread().getName() + ": " + i);
                Thread.sleep(500); // Simulating some task
            }
        } catch (InterruptedException e) {
            System.out.println(Thread.currentThread().getName() + " has been interrupted.");
        }
        System.out.println(Thread.currentThread().getName() + " has finished.");
    }
}

class MyRunnable implements Runnable {
    
    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName() + " is running.");
        try {
            // Performing some task
            for (int i = 0; i < 5; i++) {
                System.out.println(Thread.currentThread().getName() + ": " + i);
                Thread.sleep(500); // Simulating some task
            }
        } catch (InterruptedException e) {
            System.out.println(Thread.currentThread().getName() + " has been interrupted.");
        }
        System.out.println(Thread.currentThread().getName() + " has finished.");
    }
}
